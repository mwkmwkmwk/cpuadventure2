start:
	ST	@-1, [my_pid]
	MOV	@-1, #00-------
	# Clear board.
init_loop:
	AND	@1, @-1, #00000++++
	SHR	@2, @-1, 4
	LD	@4, [type2color]
	LD	@3, [type2chr]
	TVC	0
	ADD	@-1, 1
	CMP	@-1, #0+-------
	JNZ	init_loop

	MOV	@2, 0
	MOV	@1, "Welcome to CPU Adventure 2!"
	SVC	1
	J	@-1, show_cmds
	MOV	@1, "Now go find valis and get the flag.  Good luck!"
	SVC	1
	J	@-1, update_status

loop:
	SVC	0
	AND	@1, #0000000++
	LD	@1, [msgtab + @1]
	J	@1

pick_action:
pick_action_retry:
	MOV	@1, "Pick an action."
	J	@-1, log_str
	J	@-1, prompt
	LD	@1, [my_pid]
	SVC	2
	SHR	@2, @1, 4
	AND	@1, #00000++++
	TVC	1
	MOV	@-2, @1
	J	@-1, update_status
	MOV	@-3, #0000000--
	CMP	@-2, 'y'
	JZ	fmove
	MOV	@-3, #0000000-+
	CMP	@-2, 'u'
	JZ	fmove
	MOV	@-3, #0000000+-
	CMP	@-2, 'b'
	JZ	fmove
	MOV	@-3, #0000000++
	CMP	@-2, 'n'
	JZ	fmove
	MOV	@-3, #00000000-
	CMP	@-2, 'h'
	JZ	fmove
	MOV	@-3, #0000000+0
	CMP	@-2, 'j'
	JZ	fmove
	MOV	@-3, #0000000-0
	CMP	@-2, 'k'
	JZ	fmove
	MOV	@-3, #00000000+
	CMP	@-2, 'l'
	JZ	fmove
	MOV	@2, #000000000
	CMP	@-2, '.'
	JZ	do_move
	CMP	@-2, 'p'
	JZ	do_pickup
	CMP	@-2, 'd'
	JZ	do_drop
	CMP	@-2, 'i'
	JZ	do_inventory
	CMP	@-2, 'f'
	JZ	do_floor
	CMP	@-2, 'q'
	JZ	do_use
	CMP	@-2, 'g'
	JZ	do_give
	CMP	@-2, '?'
	JZ	do_help
	CMP	@-2, 3
	JZ	do_quit

	TVC	-1
	J	pick_action_retry

fmove:
	LD	@1, [my_pid]
	SVC	2
	AND	@2, @1, #00000++++
	AND	@3, @-3, #00000000+
	ADD	@2, @3
	AND	@0, @2, #+++++0000
	JNZ	move
	SHR	@3, @1, 4
	SHR	@4, @-3, 1
	ADD	@3, @4
	AND	@0, @3, #++++++000
	JNZ	move
	SHL	@3, 4
	XOR	@1, @2, @3
	SVC	-1
	CMP	@1, 0
	JG	fight
move:
	MOV	@2, @-3
do_move:
	MOV	@1, 0
	J	loop

fight:
	MOV	@2, @-3
	MOV	@1, 1
	J	loop

do_quit:
	MOV	@1, "User quit."
	MOV	@2, 3
	SVC	1
	MOV	@1, 1
	SVC	4

do_help:
	MOV	@2, 0
	J	@-1, show_cmds
	J	pick_action

show_cmds:
	MOV	@1, "Available commands:"
	SVC	1
	MOV	@1, "[h] move or fight left"
	SVC	1
	MOV	@1, "[j] move or fight down"
	SVC	1
	MOV	@1, "[k] move or fight up"
	SVC	1
	MOV	@1, "[l] move or fight right"
	SVC	1
	MOV	@1, "[y] move or fight up-left"
	SVC	1
	MOV	@1, "[u] move or fight up-right"
	SVC	1
	MOV	@1, "[b] move or fight down-left"
	SVC	1
	MOV	@1, "[n] move or fight down-right"
	SVC	1
	MOV	@1, "[.] do nothing"
	SVC	1
	MOV	@1, "[i] show inventory"
	SVC	1
	MOV	@1, "[f] show items on the floor here"
	SVC	1
	MOV	@1, "[d] drop item"
	SVC	1
	MOV	@1, "[p] pick up item"
	SVC	1
	MOV	@1, "[q] use item"
	SVC	1
	MOV	@1, "[g] give item to someone"
	SVC	1
	MOV	@1, "[?] show command list"
	SVC	1
	MOV	@1, "[Ctrl-C] quit the game"
	SVC	1
	J	@-1

do_inventory:
	SVC	-2
	J	list

do_floor:
	SVC	-4
	J	list

list:
	SVC	-3
	CMP	@1, 0
	JZ	list_end
	MOV	@-3, @2
	LD	@1, [desc_table + @1]
	J	@-1, log_str
	MOV	@1, " ["
	J	@-1, log_str
	MOV	@1, @-3
	J	@-1, log_int
	MOV	@1, "]"
	J	@-1, log_str
	MOV	@1, 0
	J	@-1, log_finish
	J	list
list_end:
	MOV	@1, "End of list."
	MOV	@2, 0
	SVC	1
	J	pick_action


do_pickup:
	SVC	-4
	J	@-1, iterate
	CMP	@1, 0
	JZ	pick_action
	J	@-1, get_count
	MOV	@3, @2
	MOV	@2, @1
	MOV	@1, 3
	J	loop

do_drop:
	SVC	-2
	J	@-1, iterate
	CMP	@1, 0
	JZ	pick_action
	J	@-1, get_count
	MOV	@3, @2
	MOV	@2, @1
	MOV	@1, 2
	J	loop

do_give:
	SVC	-2
	J	@-1, iterate
	CMP	@1, 0
	JZ	pick_action
	J	@-1, get_count
	SUB	@-4, 2
	ST	@1, [@-4 + 0]
	ST	@2, [@-4 + 1]
	MOV	@1, "Pick a direction."
	J	@-1, log_str
	J	@-1, prompt
give_direction:
	LD	@1, [my_pid]
	SVC	2
	SHR	@2, @1, 4
	AND	@1, #00000++++
	TVC	1
	MOV	@-2, #0000000--
	CMP	@1, 'y'
	JZ	give_fin
	MOV	@-2, #0000000-+
	CMP	@1, 'u'
	JZ	give_fin
	MOV	@-2, #0000000+-
	CMP	@1, 'b'
	JZ	give_fin
	MOV	@-2, #0000000++
	CMP	@1, 'n'
	JZ	give_fin
	MOV	@-2, #00000000-
	CMP	@1, 'h'
	JZ	give_fin
	MOV	@-2, #0000000+0
	CMP	@1, 'j'
	JZ	give_fin
	MOV	@-2, #0000000-0
	CMP	@1, 'k'
	JZ	give_fin
	MOV	@-2, #00000000+
	CMP	@1, 'l'
	JZ	give_fin
	J	give_direction
give_fin:
	J	@-1, update_status
	MOV	@1, -1
	MOV	@2, @-2
	LD	@3, [@-4 + 0]
	LD	@4, [@-4 + 1]
	ADD	@-4, 2
	J	loop

do_use:
	SVC	-2
	J	@-1, iterate
	CMP	@1, 0
	JZ	pick_action
	MOV	@2, @1
	MOV	@1, 4
	J	loop

iterate:
	SUB	@-4, 3
	ST	@-1, [@-4 + 0]
iterate_loop:
	SVC	-3
	CMP	@1, 0
	JZ	iterate_end
	ST	@1, [@-4 + 1]
	ST	@2, [@-4 + 2]
	LD	@1, [@-4 + 1]
	LD	@1, [desc_table + @1]
	J	@-1, log_str
	MOV	@1, " ["
	J	@-1, log_str
	LD	@1, [@-4 + 2]
	J	@-1, log_int
	MOV	@1, "]: select? [yn] "
	J	@-1, log_str
	MOV	@1, 0
	J	@-1, prompt
iterate_select:
	LD	@1, [cursor_pos]
	ADD	@1, -40
	MOV	@2, 14
	TVC	1
	CMP	@1, 'y'
	JZ	iterate_selected
	CMP	@1, 'n'
	JNZ	iterate_select
	J	@-1, update_status
	J	iterate_loop

iterate_end:
	J	@-1, update_status
	MOV	@1, "No item selected."
	MOV	@2, 0
	SVC	1
	MOV	@1, 0
	MOV	@2, 0
	LD	@-1, [@-4 + 0]
	ADD	@-4, 3
	J	@-1

iterate_selected:
	J	@-1, update_status
	LD	@-1, [@-4 + 0]
	LD	@1, [@-4 + 1]
	LD	@2, [@-4 + 2]
	ADD	@-4, 3
	J	@-1

get_count:
	CMP	@2, 1
	JZ	@-1
	SUB	@-4, 3
	ST	@-1, [@-4 + 0]
	ST	@-2, [@-4 + 1]
	ST	@-3, [@-4 + 2]
	MOV	@-2, @1
	MOV	@-3, @2

count_loop:
	MOV	@1, "How many? [1-"
	J	@-1, log_str
	MOV	@1, @-3
	J	@-1, log_int
	MOV	@1, "] "
	J	@-1, log_str
	J	@-1, prompt

	J	@-1, gets
	CMP	@1, @0
	JZ	count_invalid
	MOV	@2, 0
	MOV	@3, input_buf
count_parse_loop:
	MUL	@2, 10
	LD	@4, [@3++]
	SUB	@4, '0'
	JL	count_invalid
	CMP	@4, 9
	JG	count_invalid
	ADD	@2, @4
	SUB	@1, 1
	JNZ	count_parse_loop

	CMP	@2, 0
	JLE	count_invalid
	CMP	@2, @-3
	JG	count_too_large
	MOV	@-3, @2

	J	@-1, update_status
	MOV	@1, @-2
	MOV	@2, @-3
	LD	@-1, [@-4 + 0]
	LD	@-2, [@-4 + 1]
	LD	@-3, [@-4 + 2]
	ADD	@-4, 3
	J	@-1

count_too_large:
	J	@-1, update_status
	MOV	@1, "You don't have that many."
	J	@-1, log_str
	MOV	@1, 2
	J	@-1, log_finish
	J	count_loop

count_invalid:
	J	@-1, update_status
	MOV	@1, "Invalid number."
	J	@-1, log_str
	MOV	@1, 2
	J	@-1, log_finish
	J	count_loop

notify_square:
	AND	@1, @2, #00000++++
	SHR	@2, 4
	LD	@4, [type2color + @3]
	LD	@3, [type2chr + @3]
	TVC	0
	J	loop

notify_use:
	MOV	@-2, @2
	ST	@3, [my_hp]
	ST	@4, [my_drunk]
	J	@-1, update_status
	CMP	@-2, -2
	JZ	use_redbull
	CMP	@-2, -3
	JZ	use_vodka
	CMP	@-2, -1
	JZ	use_walizka
	J	loop

use_redbull:
	MOV	@1, "You drink a redbull.  You feel much better."
	MOV	@2, 0
	SVC	1
	J	loop

use_vodka:
	LD	@2, [my_drunk]
	CMP	@2, 2
	JZ	vodka_very
	JG	vodka_extremely
	MOV	@1, "You drink a bottle of vodka.  You get drunk."
	J	vodka_do
vodka_very:
	MOV	@1, "You drink a bottle of vodka.  You get very drunk."
	J	vodka_do
vodka_extremely:
	MOV	@1, "You drink a bottle of vodka.  You get extremely drunk."
vodka_do:
	MOV	@2, 1
	SVC	1
	J	loop

use_walizka:
	MOV	@1, "You drink everything within walizka valisa.  You get extremely drunk."
	MOV	@2, 2
	SVC	1
	J	loop

notify_bump:
	MOV	@-2, @2
	MOV	@-3, @3
	MOV	@1, @-2
	SVC	2
	LD	@1, [Desc_table + @2]
	J	@-1, log_str
	MOV	@1, " bumps into "
	LD	@-1, [my_pid]
	CMP	@-2, @-1
	JNZ	notify_bump_s
	MOV	@1, " bump into "
notify_bump_s:
	J	@-1, log_str
	MOV	@1, @-3
	SVC	2
	LD	@1, [desc_table + @2]
	J	@-1, log_str
	MOV	@1, @0
	LD	@-1, [my_pid]
	CMP	@-2, @-1
	JNZ	notify_bump_not_me
	MOV	@1, 2
notify_bump_not_me:
	J	@-1, log_finish
	J	loop

notify_croak:
	MOV	@-2, @2
	MOV	@-3, @3
	MOV	@1, @-2
	SVC	2
	LD	@1, [Desc_table + @2]
	J	@-1, log_str
	MOV	@1, " kills "
	LD	@-1, [my_pid]
	CMP	@-2, @-1
	JNZ	notify_croak_s
	MOV	@1, " kill "
notify_croak_s:
	J	@-1, log_str
	MOV	@1, @-3
	SVC	2
	LD	@1, [desc_table + @2]
	J	@-1, log_str
	MOV	@1, 1
	J	@-1, log_finish
	LD	@-1, [my_pid]
	CMP	@-3, @-1
	JZ	croak_self
	J	loop

croak_self:
	MOV	@1, "You die..."
	MOV	@2, 3
	SVC	1
	J	loop

notify_attack:
	MOV	@-2, @2
	MOV	@-3, @3
	LD	@-1, [my_pid]
	CMP	@3, @-1
	JNZ	attack_not_me
	ST	@4, [my_hp]
	J	@-1, update_status
attack_not_me:
	MOV	@1, @-2
	SVC	2
	LD	@1, [Desc_table + @2]
	J	@-1, log_str
	MOV	@1, " hits "
	LD	@-1, [my_pid]
	CMP	@-2, @-1
	JNZ	notify_attack_s
	MOV	@1, " hit "
notify_attack_s:
	J	@-1, log_str
	MOV	@1, "empty air"
	CMP	@-3, 0
	JZ	notify_attack_air
	MOV	@1, @-3
	SVC	2
	LD	@1, [desc_table + @2]
notify_attack_air:
	J	@-1, log_str
	MOV	@1, 1
	J	@-1, log_finish
	J	loop

update_status:
	SUB	@-4, 3
	ST	@-1, [@-4 + 0]
	ST	@-2, [@-4 + 1]
	ST	@-3, [@-4 + 2]
	MOV	@1, "[HP: "
	J	@-1, log_str
	LD	@1, [my_hp]
	J	@-1, log_int
	LD	@1, [my_drunk]
	CMP	@1, 0
	JZ	not_drunk
	MOV	@1, ", drunk: "
	J	@-1, log_str
	LD	@1, [my_drunk]
	J	@-1, log_int
not_drunk:
	MOV	@1, "] "
	J	@-1, log_str
	LD	@-3, [log_pos]
	ST	@-3, [prompt_pos]
	ST	@0, [log_pos]
	MOV	@-2, @0
status_loop:	
	ADD	@1, @-2, -40
	MOV	@2, 14
	LD	@3, [log_buf + @-2]
	MOV	@4, 3
	TVC	0
	ADD	@-2, 1
	CMP	@-2, @-3
	JNZ	status_loop
status_clear_loop:
	ADD	@1, @-2, -40
	MOV	@2, 14
	MOV	@3, ' '
	MOV	@4, 0
	TVC	0
	ADD	@-2, 1
	CMP	@-2, 81
	JNZ	status_clear_loop
	LD	@-1, [@-4 + 0]
	LD	@-2, [@-4 + 1]
	LD	@-3, [@-4 + 2]
	ADD	@-4, 3
	J	@-1

prompt:
	SUB	@-4, 3
	ST	@-1, [@-4 + 0]
	ST	@-2, [@-4 + 1]
	ST	@-3, [@-4 + 2]
	LD	@-3, [log_pos]
	MOV	@-2, @0
prompt_loop:	
	LD	@1, [prompt_pos]
	ADD	@1, -40
	ADD	@1, @-2
	MOV	@2, 14
	LD	@3, [log_buf + @-2]
	MOV	@4, #0000+00-+
	TVC	0
	ADD	@-2, 1
	CMP	@-2, @-3
	JNZ	prompt_loop

	LD	@1, [prompt_pos]
	LD	@2, [log_pos]
	ADD	@1, @2
	ST	@1, [cursor_pos]
	ST	@0, [log_pos]

	LD	@-1, [@-4 + 0]
	LD	@-2, [@-4 + 1]
	LD	@-3, [@-4 + 2]
	ADD	@-4, 3
	J	@-1

log_int:
	LD	@2, [log_pos]
	ADD	@2, log_buf
	CMP	@1, @0
	JGE	log_int_pos
	JZ	log_int_zero
	MOV	@3, '-'
	ST	@3, [@2++]
	NEG	@1, @1
log_int_pos:
	MOV	@3, int_log_buf + 4
log_int_loop1:
	MOD	@4, @1, 10
	DIV	@1, @1, 10
	ADD	@4, '0'
	ST	@4, [@3--]
	CMP	@1, @0
	JNZ	log_int_loop1
	ADD	@3, 1
log_int_loop2:
	LD	@1, [@3++]
	CMP	@1, @0
	JZ	log_int_end
	ST	@1, [@2++]
	J	log_int_loop2

log_int_zero:
	MOV	@3, '0'
	ST	@3, [@2++]
log_int_end:
	SUB	@2, log_buf
	ST	@2, [log_pos]
	J	@-1

log_str:
	LD	@2, [log_pos]
	ADD	@2, log_buf
log_str_loop:
	LD	@3, [@1++]
	ST	@3, [@2++]
	CMP	@3, @0
	JNZ	log_str_loop
	SUB	@2, log_buf+1
	ST	@2, [log_pos]
	J	@-1

log_finish:
	MOV	@2, @1
	LD	@1, [log_pos]
	ST	@0, [log_buf + @1]
	MOV	@1, log_buf
	SVC	1
log_clear:
	ST	@0, [log_pos]
	J	@-1

gets:
	SUB	@-4, 3
	ST	@-1, [@-4 + 0]
	ST	@-2, [@-4 + 1]
	ST	@-3, [@-4 + 2]
	MOV	@-2, 0
gets_loop:
	LD	@1, [cursor_pos]
	ADD	@1, @-2
	ADD	@1, -40
	MOV	@2, 14
	TVC	1
	CMP	@1, 8
	JZ	gets_backspace
	CMP	@1, 127
	JZ	gets_backspace
	CMP	@1, 13
	JZ	gets_end
	CMP	@1, 10
	JZ	gets_end
	CMP	@-2, 9
	JZ	gets_ovf
	ST	@1, [input_buf + @-2]
	MOV	@3, @1
	LD	@1, [cursor_pos]
	ADD	@1, @-2
	ADD	@1, -40
	MOV	@2, 14
	MOV	@4, #0000+0000
	TVC	0
	ADD	@-2, 1
	J	gets_loop

gets_ovf:
	TVC	-1
	J	gets_loop

gets_backspace:
	SUB	@-2, 1
	LD	@1, [cursor_pos]
	ADD	@1, @-2
	ADD	@1, -40
	MOV	@2, 14
	MOV	@3, ' '
	MOV	@4, 0
	TVC	0
	J	gets_loop

gets_end:
	MOV	@1, @-2
	LD	@-1, [@-4 + 0]
	LD	@-2, [@-4 + 1]
	LD	@-3, [@-4 + 2]
	ADD	@-4, 3
	J	@-1


	BYTE	loop
	BYTE	notify_bump
	BYTE	notify_croak
	BYTE	notify_attack
msgtab:	BYTE	pick_action
	BYTE	notify_square
	BYTE	loop
	BYTE	notify_use
	BYTE	loop

		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE #0000+00-0
		BYTE #0000+000-
		BYTE #0000+00+0
		BYTE #0000+000+
		BYTE #0000+0000
type2color:	BYTE 0
		BYTE #0000+0000
		BYTE #0000+0000
		BYTE #0000+000+
		BYTE #0000+00+0
		BYTE #0000+000-
		BYTE #0000+00-0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0

		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE '*'
		BYTE '!'
		BYTE '!'
		BYTE '!'
		BYTE '('
type2chr:	BYTE '.'
		BYTE '@'
		BYTE 'V'
		BYTE 'B'
		BYTE 'W'
		BYTE 'D'
		BYTE 'C'
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0
		BYTE 0

		BYTE "head of the Cyberdragon"
		BYTE "empty bottle"
		BYTE "bottle of vodka"
		BYTE "can of red bull"
		BYTE "walizka valisa"
desc_table:	BYTE "a wall"
		BYTE "you"
		BYTE "valis"
		BYTE "a blue dragon"
		BYTE "a white dragon"
		BYTE "a drunk dragon"
		BYTE "the Cyberdragon"

Desc_table:	BYTE "A wall"
		BYTE "You"
		BYTE "valis"
		BYTE "A blue dragon"
		BYTE "A white dragon"
		BYTE "A drunk dragon"
		BYTE "The Cyberdragon"


STRINGPOOL

my_pid:		BYTE 0
my_hp:		BYTE 100
my_drunk:	BYTE 0
input_buf:	BYTES 9
input_pos:	BYTE 0
int_log_buf:	BYTES 9
log_pos:	BYTE 0
log_buf:	BYTES 243
prompt_pos:	BYTE 0
cursor_pos:	BYTE 0
